//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var RulesToEndpoints = newRulesToEndpointsTable("", "rules_to_endpoints", "")

type rulesToEndpointsTable struct {
	sqlite.Table

	// Columns
	Internal   sqlite.ColumnBool
	RuleID     sqlite.ColumnInteger
	EndpointID sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type RulesToEndpointsTable struct {
	rulesToEndpointsTable

	EXCLUDED rulesToEndpointsTable
}

// AS creates new RulesToEndpointsTable with assigned alias
func (a RulesToEndpointsTable) AS(alias string) *RulesToEndpointsTable {
	return newRulesToEndpointsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RulesToEndpointsTable with assigned schema name
func (a RulesToEndpointsTable) FromSchema(schemaName string) *RulesToEndpointsTable {
	return newRulesToEndpointsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RulesToEndpointsTable with assigned table prefix
func (a RulesToEndpointsTable) WithPrefix(prefix string) *RulesToEndpointsTable {
	return newRulesToEndpointsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RulesToEndpointsTable with assigned table suffix
func (a RulesToEndpointsTable) WithSuffix(suffix string) *RulesToEndpointsTable {
	return newRulesToEndpointsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRulesToEndpointsTable(schemaName, tableName, alias string) *RulesToEndpointsTable {
	return &RulesToEndpointsTable{
		rulesToEndpointsTable: newRulesToEndpointsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newRulesToEndpointsTableImpl("", "excluded", ""),
	}
}

func newRulesToEndpointsTableImpl(schemaName, tableName, alias string) rulesToEndpointsTable {
	var (
		InternalColumn   = sqlite.BoolColumn("internal")
		RuleIDColumn     = sqlite.IntegerColumn("rule_id")
		EndpointIDColumn = sqlite.IntegerColumn("endpoint_id")
		allColumns       = sqlite.ColumnList{InternalColumn, RuleIDColumn, EndpointIDColumn}
		mutableColumns   = sqlite.ColumnList{InternalColumn, RuleIDColumn, EndpointIDColumn}
	)

	return rulesToEndpointsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Internal:   InternalColumn,
		RuleID:     RuleIDColumn,
		EndpointID: EndpointIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
