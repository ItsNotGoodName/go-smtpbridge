//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Endpoints = newEndpointsTable("", "endpoints", "")

type endpointsTable struct {
	sqlite.Table

	// Columns
	ID                sqlite.ColumnInteger
	Internal          sqlite.ColumnBool
	InternalID        sqlite.ColumnString
	Name              sqlite.ColumnString
	AttachmentDisable sqlite.ColumnBool
	TextDisable       sqlite.ColumnBool
	TitleTemplate     sqlite.ColumnString
	BodyTemplate      sqlite.ColumnString
	Kind              sqlite.ColumnString
	Config            sqlite.ColumnString
	UpdatedAt         sqlite.ColumnTimestamp
	CreatedAt         sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type EndpointsTable struct {
	endpointsTable

	EXCLUDED endpointsTable
}

// AS creates new EndpointsTable with assigned alias
func (a EndpointsTable) AS(alias string) *EndpointsTable {
	return newEndpointsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EndpointsTable with assigned schema name
func (a EndpointsTable) FromSchema(schemaName string) *EndpointsTable {
	return newEndpointsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EndpointsTable with assigned table prefix
func (a EndpointsTable) WithPrefix(prefix string) *EndpointsTable {
	return newEndpointsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EndpointsTable with assigned table suffix
func (a EndpointsTable) WithSuffix(suffix string) *EndpointsTable {
	return newEndpointsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEndpointsTable(schemaName, tableName, alias string) *EndpointsTable {
	return &EndpointsTable{
		endpointsTable: newEndpointsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newEndpointsTableImpl("", "excluded", ""),
	}
}

func newEndpointsTableImpl(schemaName, tableName, alias string) endpointsTable {
	var (
		IDColumn                = sqlite.IntegerColumn("id")
		InternalColumn          = sqlite.BoolColumn("internal")
		InternalIDColumn        = sqlite.StringColumn("internal_id")
		NameColumn              = sqlite.StringColumn("name")
		AttachmentDisableColumn = sqlite.BoolColumn("attachment_disable")
		TextDisableColumn       = sqlite.BoolColumn("text_disable")
		TitleTemplateColumn     = sqlite.StringColumn("title_template")
		BodyTemplateColumn      = sqlite.StringColumn("body_template")
		KindColumn              = sqlite.StringColumn("kind")
		ConfigColumn            = sqlite.StringColumn("config")
		UpdatedAtColumn         = sqlite.TimestampColumn("updated_at")
		CreatedAtColumn         = sqlite.TimestampColumn("created_at")
		allColumns              = sqlite.ColumnList{IDColumn, InternalColumn, InternalIDColumn, NameColumn, AttachmentDisableColumn, TextDisableColumn, TitleTemplateColumn, BodyTemplateColumn, KindColumn, ConfigColumn, UpdatedAtColumn, CreatedAtColumn}
		mutableColumns          = sqlite.ColumnList{InternalColumn, InternalIDColumn, NameColumn, AttachmentDisableColumn, TextDisableColumn, TitleTemplateColumn, BodyTemplateColumn, KindColumn, ConfigColumn, UpdatedAtColumn, CreatedAtColumn}
	)

	return endpointsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Internal:          InternalColumn,
		InternalID:        InternalIDColumn,
		Name:              NameColumn,
		AttachmentDisable: AttachmentDisableColumn,
		TextDisable:       TextDisableColumn,
		TitleTemplate:     TitleTemplateColumn,
		BodyTemplate:      BodyTemplateColumn,
		Kind:              KindColumn,
		Config:            ConfigColumn,
		UpdatedAt:         UpdatedAtColumn,
		CreatedAt:         CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
