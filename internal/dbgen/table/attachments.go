//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Attachments = newAttachmentsTable("", "attachments", "")

type attachmentsTable struct {
	sqlite.Table

	// Columns
	ID        sqlite.ColumnInteger
	MessageID sqlite.ColumnInteger
	Name      sqlite.ColumnString
	Mime      sqlite.ColumnString
	Extension sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type AttachmentsTable struct {
	attachmentsTable

	EXCLUDED attachmentsTable
}

// AS creates new AttachmentsTable with assigned alias
func (a AttachmentsTable) AS(alias string) *AttachmentsTable {
	return newAttachmentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AttachmentsTable with assigned schema name
func (a AttachmentsTable) FromSchema(schemaName string) *AttachmentsTable {
	return newAttachmentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AttachmentsTable with assigned table prefix
func (a AttachmentsTable) WithPrefix(prefix string) *AttachmentsTable {
	return newAttachmentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AttachmentsTable with assigned table suffix
func (a AttachmentsTable) WithSuffix(suffix string) *AttachmentsTable {
	return newAttachmentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAttachmentsTable(schemaName, tableName, alias string) *AttachmentsTable {
	return &AttachmentsTable{
		attachmentsTable: newAttachmentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newAttachmentsTableImpl("", "excluded", ""),
	}
}

func newAttachmentsTableImpl(schemaName, tableName, alias string) attachmentsTable {
	var (
		IDColumn        = sqlite.IntegerColumn("id")
		MessageIDColumn = sqlite.IntegerColumn("message_id")
		NameColumn      = sqlite.StringColumn("name")
		MimeColumn      = sqlite.StringColumn("mime")
		ExtensionColumn = sqlite.StringColumn("extension")
		allColumns      = sqlite.ColumnList{IDColumn, MessageIDColumn, NameColumn, MimeColumn, ExtensionColumn}
		mutableColumns  = sqlite.ColumnList{MessageIDColumn, NameColumn, MimeColumn, ExtensionColumn}
	)

	return attachmentsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		MessageID: MessageIDColumn,
		Name:      NameColumn,
		Mime:      MimeColumn,
		Extension: ExtensionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
