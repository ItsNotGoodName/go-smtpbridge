// Code generated by templ@v0.2.334 DO NOT EDIT.

package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"net/url"
	"strconv"

	"github.com/ItsNotGoodName/smtpbridge/internal/models"
	"github.com/ItsNotGoodName/smtpbridge/internal/trace"
	c "github.com/ItsNotGoodName/smtpbridge/web/components"
	"github.com/ItsNotGoodName/smtpbridge/web/icons"
	"github.com/ItsNotGoodName/smtpbridge/web/meta"
	"github.com/ItsNotGoodName/smtpbridge/web/routes"
)

type traceListViewProps struct {
	TraceListRequest models.DTOTraceListRequest
	TraceListResult  models.DTOTraceListResult
	Query            url.Values
}

func traceListView(m meta.Meta, props traceListViewProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_2 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			_, err = templBuffer.WriteString("<div class=\"border-base-200 breadcrumbs border-b p-4 text-xl font-bold\"><ul><li>")
			if err != nil {
				return err
			}
			var_3 := `Traces`
			_, err = templBuffer.WriteString(var_3)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</li></ul></div> <div class=\"flex flex-col gap-4 p-4\"><div class=\"join flex items-center justify-end\" data-loading-states><button title=\"Delete All\" class=\"btn btn-sm btn-error\" hx-delete=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(routes.TraceList().URLString()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-confirm=\"Are you sure you wish to delete all traces?\" data-loading-disable><span data-loading-class=\"loading loading-spinner loading-sm\">")
			if err != nil {
				return err
			}
			err = icons.Trash("w-5 h-5").Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span></button></div>")
			if err != nil {
				return err
			}
			err = c.PaginateHeader(c.PaginateHeaderProps{
				Route:      routes.TraceList(),
				Query:      props.Query,
				PageResult: props.TraceListResult.PageResult,
				Ascending:  props.TraceListRequest.Ascending,
			}).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div> <div class=\"flex flex-col gap-4 px-4\">")
			if err != nil {
				return err
			}
			for _, traces := range props.TraceListResult.Traces {
				var var_4 = []any{"w-full", templ.KV("join join-vertical", len(traces) > 1)}
				err = templ.RenderCSSItems(ctx, templBuffer, var_4...)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<div class=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_4).String()))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				for _, t := range traces {
					_, err = templBuffer.WriteString("<div class=\"collapse-arrow join-item border-base-content collapse border\"><input type=\"radio\" name=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString("trace-" + strconv.FormatInt(t.ID, 10)))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\"><div class=\"collapse-title flex flex-col items-center justify-between sm:flex-row\"><div class=\"flex flex-col items-center gap-2 sm:flex-row\"><div class=\"flex flex-row items-center gap-2\"><div class=\"badge btn-outline\">")
					if err != nil {
						return err
					}
					var var_5 string = strconv.Itoa(t.Seq)
					_, err = templBuffer.WriteString(templ.EscapeString(var_5))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</div>")
					if err != nil {
						return err
					}
					if t.Level == trace.LevelError {
						err = icons.ErrorWarning("fill-error h-6 w-6").Render(ctx, templBuffer)
						if err != nil {
							return err
						}
					}
					_, err = templBuffer.WriteString("</div><span>")
					if err != nil {
						return err
					}
					err = c.FormatDate(m, t.CreatedAt.Time()).Render(ctx, templBuffer)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</span></div><div class=\"font-bold\">")
					if err != nil {
						return err
					}
					var var_6 string = string(t.Action)
					_, err = templBuffer.WriteString(templ.EscapeString(var_6))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</div></div><div class=\"collapse-content bg-base-200 rounded-none\"><div class=\"border-base-content flex flex-col rounded-none border-b p-1 sm:flex-row\"><div class=\"flex-1 font-bold\">")
					if err != nil {
						return err
					}
					var_7 := `source`
					_, err = templBuffer.WriteString(var_7)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</div><div class=\"flex-1 text-right\">")
					if err != nil {
						return err
					}
					var var_8 string = t.Source
					_, err = templBuffer.WriteString(templ.EscapeString(var_8))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</div></div>")
					if err != nil {
						return err
					}
					for _, kv := range t.Data {
						_, err = templBuffer.WriteString("<div class=\"border-base-content flex flex-col rounded-none border-b p-1 sm:flex-row\"><div class=\"flex-1 font-bold\">")
						if err != nil {
							return err
						}
						var var_9 string = kv.Key
						_, err = templBuffer.WriteString(templ.EscapeString(var_9))
						if err != nil {
							return err
						}
						_, err = templBuffer.WriteString("</div><div class=\"flex-1 text-right\">")
						if err != nil {
							return err
						}
						switch kv.Key {
						case trace.KeyEnvelope:
							_, err = templBuffer.WriteString("<a class=\"link\" href=\"")
							if err != nil {
								return err
							}
							var var_10 templ.SafeURL = routes.Envelope(kv.ValueInt64()).URL()
							_, err = templBuffer.WriteString(templ.EscapeString(string(var_10)))
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("\">")
							if err != nil {
								return err
							}
							var var_11 string = kv.Value
							_, err = templBuffer.WriteString(templ.EscapeString(var_11))
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("</a>")
							if err != nil {
								return err
							}
						case trace.KeyRule:
							_, err = templBuffer.WriteString("<a class=\"link\" href=\"")
							if err != nil {
								return err
							}
							var var_12 templ.SafeURL = routes.Rule(kv.ValueInt64()).URL()
							_, err = templBuffer.WriteString(templ.EscapeString(string(var_12)))
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("\">")
							if err != nil {
								return err
							}
							var var_13 string = kv.Value
							_, err = templBuffer.WriteString(templ.EscapeString(var_13))
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("</a>")
							if err != nil {
								return err
							}
						case trace.KeyEndpoint:
							_, err = templBuffer.WriteString("<a class=\"link\" href=\"")
							if err != nil {
								return err
							}
							var var_14 templ.SafeURL = routes.Endpoint(kv.ValueInt64()).URL()
							_, err = templBuffer.WriteString(templ.EscapeString(string(var_14)))
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("\">")
							if err != nil {
								return err
							}
							var var_15 string = kv.Value
							_, err = templBuffer.WriteString(templ.EscapeString(var_15))
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("</a>")
							if err != nil {
								return err
							}
						default:
							var var_16 string = kv.Value
							_, err = templBuffer.WriteString(templ.EscapeString(var_16))
							if err != nil {
								return err
							}
						}
						_, err = templBuffer.WriteString("</div></div>")
						if err != nil {
							return err
						}
					}
					_, err = templBuffer.WriteString("</div></div>")
					if err != nil {
						return err
					}
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div> ")
			if err != nil {
				return err
			}
			if len(props.TraceListResult.Traces) != 0 {
				err = c.PaginateFooter(c.PaginateFooterProps{
					Route:      routes.TraceList(),
					Query:      props.Query,
					PageResult: props.TraceListResult.PageResult,
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = c.LayoutDefault(m).Render(templ.WithChildren(ctx, var_2), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
