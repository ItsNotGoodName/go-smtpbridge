// Code generated by templ@v0.2.334 DO NOT EDIT.

package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"github.com/ItsNotGoodName/smtpbridge/internal/build"
	"github.com/ItsNotGoodName/smtpbridge/internal/models"
	"github.com/ItsNotGoodName/smtpbridge/pkg/htmx"
	c "github.com/ItsNotGoodName/smtpbridge/web/components"
	"github.com/ItsNotGoodName/smtpbridge/web/events"
	"github.com/ItsNotGoodName/smtpbridge/web/helpers"
	"github.com/ItsNotGoodName/smtpbridge/web/meta"
	"github.com/ItsNotGoodName/smtpbridge/web/routes"
	"strconv"
)

type indexViewProps struct {
	StorageStatsProps c.StorageStatsProps
	RetentionPolicy   models.ConfigRetentionPolicy
	Envelopes         []models.Envelope
}

func indexView(m meta.Meta, props indexViewProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_2 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			_, err = templBuffer.WriteString("<div class=\"flex flex-col gap-4 p-4\"><div hx-trigger=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(htmx.Join("every 5s", events.EnvelopeCreated.FromBody(), events.RetentionPolicyRun.FromBody())))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-get=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(routes.RecentEnvelopeListComponent().URLString()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			err = c.RecentEnvelopeList(m, c.RecentEnvelopeListProps{
				Envelopes: props.Envelopes,
			}).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div><div class=\"overflow-x-auto\"><div class=\"stats stats-vertical md:stats-horizontal border-base-200 w-full border\" hx-trigger=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(htmx.Join("every 5s", events.EnvelopeCreated.FromBody(), events.RetentionPolicyRun.FromBody())))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-get=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(routes.StorageStatsComponent().URLString()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			err = c.StorageStats(props.StorageStatsProps).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div></div><div class=\"flex flex-col gap-4 lg:flex-row\"><div class=\"flex-1\"><div class=\"border-base-200 rounded border\"><div class=\"border-base-200 flex items-center justify-between gap-4 border-b p-4\"><h1 class=\"text-xl font-bold\">")
			if err != nil {
				return err
			}
			var_3 := `Retention Policy`
			_, err = templBuffer.WriteString(var_3)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h1><button class=\"btn btn-xs\" hx-post=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(routes.RetentionPolicyRun().URLString()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"><span data-loading-class=\"loading loading-spinner loading-xs\">")
			if err != nil {
				return err
			}
			var_4 := `Run`
			_, err = templBuffer.WriteString(var_4)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span></button></div><div class=\"overflow-x-auto\"><table class=\"table\"><tbody>")
			if err != nil {
				return err
			}
			if props.RetentionPolicy.MinAge.String() != "0s" {
				_, err = templBuffer.WriteString("<tr><th>")
				if err != nil {
					return err
				}
				var_5 := `Minimum Age`
				_, err = templBuffer.WriteString(var_5)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</th><td>")
				if err != nil {
					return err
				}
				var var_6 string = props.RetentionPolicy.MinAge.String()
				_, err = templBuffer.WriteString(templ.EscapeString(var_6))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</td></tr>")
				if err != nil {
					return err
				}
			}
			if props.RetentionPolicy.EnvelopeCount != nil {
				_, err = templBuffer.WriteString("<tr><th>")
				if err != nil {
					return err
				}
				var_7 := `Total Envelope Count`
				_, err = templBuffer.WriteString(var_7)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</th><td>")
				if err != nil {
					return err
				}
				var var_8 string = strconv.Itoa(*props.RetentionPolicy.EnvelopeCount)
				_, err = templBuffer.WriteString(templ.EscapeString(var_8))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</td></tr>")
				if err != nil {
					return err
				}
			}
			if props.RetentionPolicy.EnvelopeAge != nil {
				_, err = templBuffer.WriteString("<tr><th>")
				if err != nil {
					return err
				}
				var_9 := `Maximum Envelope Age`
				_, err = templBuffer.WriteString(var_9)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</th><td>")
				if err != nil {
					return err
				}
				var var_10 string = props.RetentionPolicy.EnvelopeAge.String()
				_, err = templBuffer.WriteString(templ.EscapeString(var_10))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</td></tr>")
				if err != nil {
					return err
				}
			}
			if props.RetentionPolicy.AttachmentSize != nil {
				_, err = templBuffer.WriteString("<tr><th>")
				if err != nil {
					return err
				}
				var_11 := `Total Attachment Size`
				_, err = templBuffer.WriteString(var_11)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</th><td>")
				if err != nil {
					return err
				}
				var var_12 string = helpers.BytesHumanize(*props.RetentionPolicy.AttachmentSize)
				_, err = templBuffer.WriteString(templ.EscapeString(var_12))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</td></tr>")
				if err != nil {
					return err
				}
			}
			if props.RetentionPolicy.TraceAge != nil {
				_, err = templBuffer.WriteString("<tr><th>")
				if err != nil {
					return err
				}
				var_13 := `Maximum Trace Age`
				_, err = templBuffer.WriteString(var_13)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</th><td>")
				if err != nil {
					return err
				}
				var var_14 string = props.RetentionPolicy.TraceAge.String()
				_, err = templBuffer.WriteString(templ.EscapeString(var_14))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</td></tr>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</tbody></table></div></div></div><div class=\"flex-1\"><div class=\"border-base-200 rounded border\"><h1 class=\"border-base-200 border-b p-4 text-xl font-bold\">")
			if err != nil {
				return err
			}
			var_15 := `Build`
			_, err = templBuffer.WriteString(var_15)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h1><div class=\"overflow-x-auto\"><table class=\"table\"><thead></thead><tbody><tr><th>")
			if err != nil {
				return err
			}
			var_16 := `Built By`
			_, err = templBuffer.WriteString(var_16)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th><td>")
			if err != nil {
				return err
			}
			var var_17 string = build.Current.BuiltBy
			_, err = templBuffer.WriteString(templ.EscapeString(var_17))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td></tr><tr><th>")
			if err != nil {
				return err
			}
			var_18 := `Commit`
			_, err = templBuffer.WriteString(var_18)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th><td><a class=\"link\" href=\"")
			if err != nil {
				return err
			}
			var var_19 templ.SafeURL = templ.URL(build.Current.CommitURL())
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_19)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_20 string = build.Current.Commit
			_, err = templBuffer.WriteString(templ.EscapeString(var_20))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></td></tr><tr><th>")
			if err != nil {
				return err
			}
			var_21 := `Date`
			_, err = templBuffer.WriteString(var_21)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th><td>")
			if err != nil {
				return err
			}
			err = c.FormatDateString(m, build.Current.Date).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td></tr><tr><th>")
			if err != nil {
				return err
			}
			var_22 := `Version`
			_, err = templBuffer.WriteString(var_22)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th><td><a class=\"link\" href=\"")
			if err != nil {
				return err
			}
			var var_23 templ.SafeURL = templ.URL(build.Current.ReleaseURL)
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_23)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_24 string = build.Current.Version
			_, err = templBuffer.WriteString(templ.EscapeString(var_24))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></td></tr></tbody></table></div></div></div></div></div>")
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = c.LayoutDefault(m).Render(templ.WithChildren(ctx, var_2), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
