// Code generated by templ@v0.2.334 DO NOT EDIT.

package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"net/url"

	"github.com/ItsNotGoodName/smtpbridge/internal/models"
	c "github.com/ItsNotGoodName/smtpbridge/web/components"
	"github.com/ItsNotGoodName/smtpbridge/web/icons"
	"github.com/ItsNotGoodName/smtpbridge/web/meta"
	"github.com/ItsNotGoodName/smtpbridge/web/routes"
)

type attachmentListViewProps struct {
	AttachmentRequest models.DTOAttachmentListRequest
	AttachmentResult  models.DTOAttachmentListResult
	Query             url.Values
}

func attachmentListView(m meta.Meta, props attachmentListViewProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_2 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			_, err = templBuffer.WriteString("<div class=\"border-base-200 breadcrumbs border-b p-4 text-xl font-bold\"><ul><li>")
			if err != nil {
				return err
			}
			var_3 := `Attachments`
			_, err = templBuffer.WriteString(var_3)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</li></ul></div> <div class=\"flex flex-col gap-4 p-4\"><div class=\"join flex items-center justify-end\"><button class=\"btn btn-sm btn-info join-item\" hx-post=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(routes.AttachmentTrim().URLString()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			err = icons.Recycle("w-5 h-5").Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button></div>")
			if err != nil {
				return err
			}
			err = c.PaginateHeader(c.PaginateHeaderProps{
				Route:      routes.AttachmentList(),
				Query:      props.Query,
				PageResult: props.AttachmentResult.PageResult,
				Ascending:  props.AttachmentRequest.Ascending,
			}).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div> <div class=\"flex flex-wrap gap-4 px-4\">")
			if err != nil {
				return err
			}
			for _, att := range props.AttachmentResult.Attachments {
				err = c.AttachmentCard(c.AttachmentCardProps{Attachment: att}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div> ")
			if err != nil {
				return err
			}
			if len(props.AttachmentResult.Attachments) != 0 {
				err = c.PaginateFooter(c.PaginateFooterProps{
					Route:      routes.AttachmentList(),
					Query:      props.Query,
					PageResult: props.AttachmentResult.PageResult,
				}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = c.LayoutDefault(m).Render(templ.WithChildren(ctx, var_2), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
