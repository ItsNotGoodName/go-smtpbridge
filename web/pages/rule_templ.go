// Code generated by templ@v0.2.334 DO NOT EDIT.

package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"strconv"

	"github.com/ItsNotGoodName/smtpbridge/internal/models"
	c "github.com/ItsNotGoodName/smtpbridge/web/components"
	"github.com/ItsNotGoodName/smtpbridge/web/icons"
	"github.com/ItsNotGoodName/smtpbridge/web/meta"
	"github.com/ItsNotGoodName/smtpbridge/web/routes"
)

type ruleListViewProps struct {
	Rules []models.Rule
}

func ruleListView(m meta.Meta, props ruleListViewProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_2 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			_, err = templBuffer.WriteString("<div class=\"border-base-200 breadcrumbs border-b p-4 text-xl font-bold\"><ul><li>")
			if err != nil {
				return err
			}
			var_3 := `Rules`
			_, err = templBuffer.WriteString(var_3)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</li></ul></div> <div class=\"flex flex-col gap-4 p-4\"><div class=\"join flex items-center justify-end\"><a title=\"Add\" class=\"btn btn-sm btn-success\" href=\"")
			if err != nil {
				return err
			}
			var var_4 templ.SafeURL = routes.RuleCreate().URL()
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_4)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			err = icons.Add("w-5 h-5").Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></div></div> <div class=\"mx-auto flex flex-col\">")
			if err != nil {
				return err
			}
			for _, rule := range props.Rules {
				_, err = templBuffer.WriteString("<div class=\"hover:bg-base-200 border-base-200 flex items-center justify-between gap-2 border-b first:border-t\" id=\"rule-row\"><a class=\"flex-1 truncate py-4 pl-4\" href=\"")
				if err != nil {
					return err
				}
				var var_5 templ.SafeURL = routes.Rule(rule.ID).URL()
				_, err = templBuffer.WriteString(templ.EscapeString(string(var_5)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var var_6 string = rule.Name
				_, err = templBuffer.WriteString(templ.EscapeString(var_6))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</a><div class=\"flex items-center gap-2 pr-4\">")
				if err != nil {
					return err
				}
				if !rule.Internal {
					_, err = templBuffer.WriteString("<div data-loading-states><button title=\"Delete\" class=\"btn btn-error btn-sm\" hx-delete=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(routes.Rule(rule.ID).URLString()))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\" hx-confirm=\"Are you sure you wish to delete this rule?\" hx-target=\"closest #rule-row\" hx-swap=\"outerHTML\" data-loading-disable><span data-loading-class=\"loading loading-spinner loading-xs\">")
					if err != nil {
						return err
					}
					err = icons.Trash("h-4 w-4").Render(ctx, templBuffer)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</span></button></div>")
					if err != nil {
						return err
					}
				}
				_, err = templBuffer.WriteString("<div>")
				if err != nil {
					return err
				}
				err = c.RuleToggleButton(c.RuleToggleButtonProps{Enable: rule.Enable, ID: rule.ID}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div></div></div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = c.LayoutDefault(m).Render(templ.WithChildren(ctx, var_2), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

type ruleViewProps struct {
	Rule          models.Rule
	RuleFormProps c.RuleFormProps
}

func ruleView(m meta.Meta, props ruleViewProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_7 := templ.GetChildren(ctx)
		if var_7 == nil {
			var_7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_8 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			_, err = templBuffer.WriteString("<div class=\"border-base-200 breadcrumbs border-b p-4 text-xl font-bold\"><ul><li><a href=\"")
			if err != nil {
				return err
			}
			var var_9 templ.SafeURL = routes.RuleList().URL()
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_9)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_10 := `Rules`
			_, err = templBuffer.WriteString(var_10)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></li><li>")
			if err != nil {
				return err
			}
			var var_11 string = strconv.FormatInt(props.Rule.ID, 10)
			_, err = templBuffer.WriteString(templ.EscapeString(var_11))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</li></ul></div> <div class=\"mx-auto flex max-w-lg flex-col gap-4 p-4\">")
			if err != nil {
				return err
			}
			err = c.RuleForm(props.RuleFormProps).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			err = c.RuleToggleButton(c.RuleToggleButtonProps{ID: props.Rule.ID, Enable: props.Rule.Enable}).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = c.LayoutDefault(m).Render(templ.WithChildren(ctx, var_8), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

type ruleCreateViewProps struct {
	RuleFormProps c.RuleFormProps
}

func ruleCreateView(m meta.Meta, props ruleCreateViewProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_12 := templ.GetChildren(ctx)
		if var_12 == nil {
			var_12 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_13 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			_, err = templBuffer.WriteString("<div class=\"border-base-200 breadcrumbs border-b p-4 text-xl font-bold\"><ul><li><a href=\"")
			if err != nil {
				return err
			}
			var var_14 templ.SafeURL = routes.RuleList().URL()
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_14)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_15 := `Rules`
			_, err = templBuffer.WriteString(var_15)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></li><li>")
			if err != nil {
				return err
			}
			var_16 := `Create`
			_, err = templBuffer.WriteString(var_16)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</li></ul></div> <div class=\"mx-auto max-w-lg p-4\">")
			if err != nil {
				return err
			}
			err = c.RuleForm(props.RuleFormProps).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = c.LayoutDefault(m).Render(templ.WithChildren(ctx, var_13), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
