package pages

import (
  "strconv"
  "time"
  "net/url"

  "github.com/ItsNotGoodName/smtpbridge/web/meta"
  c "github.com/ItsNotGoodName/smtpbridge/web/components"
  "github.com/ItsNotGoodName/smtpbridge/web/routes"
  "github.com/ItsNotGoodName/smtpbridge/internal/models"
  "github.com/ItsNotGoodName/smtpbridge/web/helpers"
  "github.com/ItsNotGoodName/smtpbridge/web/icons"
	"strings"
)

type envelopeViewProps struct {
  Envelope models.Envelope
  Endpoints []models.Endpoint
  Tab      routes.EnvelopeTab
}

templ envelopeView(m meta.Meta, props envelopeViewProps) {
	@c.LayoutDefault(m) {
    <div class="border-base-200 breadcrumbs border-b p-4 text-xl font-bold">
      <ul>
        <li><a href={routes.EnvelopeList().URL() }>Envelopes</a></li>
        <li>{ strconv.FormatInt(props.Envelope.Message.ID, 10) }</li>
      </ul>
    </div>
    <div class="overflow-x-auto">
      <table class="table">
        <tbody>
          <tr>
            <th class="w-0 whitespace-nowrap">From</th>
            <td>{ props.Envelope.Message.From }</td>
          </tr>
          <tr>
            <th class="w-0 whitespace-nowrap">Subject</th>
            <td>{ props.Envelope.Message.Subject }</td>
          </tr>
          <tr>
            <th class="w-0 whitespace-nowrap">To</th>
            <td class="flex items-center gap-2">
            for _, to := range props.Envelope.Message.To { 
              <span class="badge">
                { to }
              </span>
            }
            </td>
          </tr>
          <tr>
            <th class="w-0 whitespace-nowrap">Date</th>
            <td>@c.FormatDate(m, props.Envelope.Message.Date.Time())</td>
          </tr>
          <tr>
            <th class="w-0 whitespace-nowrap">Created At</th>
            <td>@c.FormatDate(m, props.Envelope.Message.CreatedAt.Time())</td>
          </tr>
        </tbody>
      </table>
    </div>
    <div class="flex flex-col gap-4 p-4" data-loading-states>
      <form class="join" hx-post={ routes.EnvelopeEndpointSend(props.Envelope.Message.ID).URLString() } hx-target="next div" hx-swap="outerHTML">
        <select name="endpoint" id="endpoint" class="select select-bordered select-sm join-item w-full">
          <option disabled selected>Select Endpoint</option>
          for _, end := range props.Endpoints {
            <option value={ strconv.FormatInt(end.ID, 10) }>{ end.Name }</option>
          }
        </select>
        <button type="submit" class="btn-sm btn btn-primary join-item" data-loading-disable>
          <span data-loading-class="loading loading-spinner loading-sm">
            Send
          </span>
        </button>
      </form>
      <div class="hidden"></div>
    </div>
    @c.EnvelopeTab(c.EnvelopeTabProps{Envelope: props.Envelope, Tab: props.Tab})
  }
}

type envelopeListViewProps struct {
  EnvelopeRequestRequest models.DTOEnvelopeListRequest
  EnvelopeRequestResult models.DTOEnvelopeListResult
  Query url.Values
}

templ envelopeListView(m meta.Meta, props envelopeListViewProps) {
	@c.LayoutDefault(m) {
    <div class="border-base-200 breadcrumbs border-b p-4 text-xl font-bold">
      <ul>
        <li>Envelopes</li>
      </ul>
    </div>
    <div class="flex flex-col gap-4 p-4">
      <div class="flex flex-col-reverse justify-between gap-4 sm:flex-row">
        <form class="flex gap-2" action={ routes.EnvelopeList().URLString() }>
          for k := range props.Query {
            if !strings.HasPrefix(k, "search") {
              <input type="hidden" name={ k } value={ props.Query.Get(k) } /> 
            }
          }
          <div class="join">
          <div class="dropdown join-item">
            <label tabindex="0" class="btn btn-sm join-item">
              @icons.Filter("w-5 h-5")
            </label>
            <ul tabindex="0" class="dropdown-content bg-base-100 rounded-box z-[1] w-52 p-2 shadow-lg">
              <li>
                <div class="form-control">
                  <label class="label cursor-pointer">
                    <span class="label-text">Subject</span> 
                    <input type="hidden" value="0" name="-search-subject" />
                    <input name="search-subject" type="checkbox" class="checkbox" checked?={ props.EnvelopeRequestRequest.SearchSubject } />
                  </label>
                </div>
              </li>
              <li>
                <div class="form-control">
                  <label class="label cursor-pointer">
                    <span class="label-text">Text</span> 
                    <input type="hidden" value="0" name="-search-text" />
                    <input name="search-text" type="checkbox" class="checkbox" checked?={ props.EnvelopeRequestRequest.SearchText } />
                  </label>
                </div>
              </li>
            </ul>
          </div>
            <input name="search" type="text" placeholder="Search" class="input input-sm input-bordered join-item w-full max-w-xs" value={ props.EnvelopeRequestRequest.Search } />
            <button title="Search" type="submit" class="btn btn-sm btn-primary join-item">@icons.Search("w-5 h-5")</button>
          </div>
        </form>
        <div class="join flex items-center justify-end" data-loading-states>
          <a title="Add" class="btn btn-sm join-item btn-success" href={ routes.EnvelopeCreate().URL() } data-loading-states>
            @icons.Add("w-5 h-5")
          </a>
          <button title="Delete All" class="btn btn-sm btn-error join-item" hx-delete={ routes.EnvelopeList().URLString() } hx-confirm="Are you sure you wish to delete all envelopes?" data-loading-disable>
            <span data-loading-class="loading loading-spinner loading-sm">
              @icons.Trash("w-5 h-5")
            </span>
          </button>
        </div>
      </div>
      @c.PaginateHeader(c.PaginateHeaderProps{
        Route: routes.EnvelopeList(),
        Query: props.Query,
        PageResult: props.EnvelopeRequestResult.PageResult,
        Ascending: props.EnvelopeRequestRequest.Ascending,
      })
    </div>
    <div class="overflow-x-auto">
      <table class="table-pin-cols table">
        <thead>
          <tr>
            <th></th>
            <td>
              @c.TableOrderTH(c.TableOrderTHProps{
                Query     : props.Query,
                Ascending : props.EnvelopeRequestRequest.Ascending,
                Order     : string(props.EnvelopeRequestRequest.Order),
                Field     : models.DTOEnvelopeFieldCreatedAt,
              }) {
                Created At
              }
            </td>
            <td>
              @c.TableOrderTH(c.TableOrderTHProps{
                Query     : props.Query,
                Ascending : props.EnvelopeRequestRequest.Ascending,
                Order     : string(props.EnvelopeRequestRequest.Order),
                Field     : models.DTOEnvelopeFieldFrom,
              }) {
                From
              }
            </td>
            <td>
              @c.TableOrderTH(c.TableOrderTHProps{
                Query     : props.Query,
                Ascending : props.EnvelopeRequestRequest.Ascending,
                Order     : string(props.EnvelopeRequestRequest.Order),
                Field     : models.DTOEnvelopeFieldSubject,
              }) {
                Subject
              }
            </td>
            <th></th>
          </tr>
        </thead>
        <tbody>
          for _, env := range props.EnvelopeRequestResult.Envelopes {
            <tr>
              <th class="z-10 w-0 whitespace-nowrap">
                { strconv.FormatInt(env.Message.ID, 10) }
              </th>
              <td class="w-0 whitespace-nowrap">
                <div class="tooltip tooltip-right" data-tip={ helpers.TimeHumanize(env.Message.CreatedAt.Time()) }>
                  <a href={ routes.Envelope(env.Message.ID).URL() }>
                    @c.FormatDate(m, time.Time(env.Message.CreatedAt))
                  </a>
                </div>
              </td>
              <td class="w-0 whitespace-nowrap">
                <a href={ routes.Envelope(env.Message.ID).URL() }>
                  { env.Message.From }
                </a>
              </td>
              <td class="whitespace-nowrap">
                <a href={ routes.Envelope(env.Message.ID).URL() }>
                  { env.Message.Subject }
                </a>
              </td>
              <th class="w-0 whitespace-nowrap">
                <div class="flex flex-row justify-end gap-2">
                  if len(env.Attachments) != 0 {
                    <a title="Attachments" href={ routes.Envelope(env.Message.ID).URLQuery("tab=" + routes.EnvelopeTabAttachments.String()) } class="tooltip tooltip-left flex items-center fill-current" data-tip={ strconv.Itoa(len(env.Attachments)) + " Attachment(s)"  }>
                      @icons.Attachment("h-4 w-4")
                    </a>
                  }
                  <button title="Delete" class="btn btn-error btn-xs join-item" hx-delete={ routes.Envelope(env.Message.ID).URLString() } hx-target="closest tr" hx-confirm="Are you sure you wish to delete this envelope?" >
                    @icons.Trash("h-4 w-4")
                  </button>
                </div>
              </th>
            </tr>
          }
        </tbody>
      </table>
    </div>
    if len(props.EnvelopeRequestResult.Envelopes) != 0 {
      @c.PaginateFooter(c.PaginateFooterProps{
        Route: routes.EnvelopeList(),
        Query: props.Query,
        PageResult: props.EnvelopeRequestResult.PageResult,
      })
    }
  }
}

type envelopeCreateViewProps struct {
}

templ envelopeCreateView(m meta.Meta, props envelopeCreateViewProps) {
	@c.LayoutDefault(m) {
    <div>
      <div class="border-base-200 breadcrumbs border-b p-4 text-xl font-bold">
        <ul>
          <li><a href={ routes.EnvelopeList().URL() }>Envelopes</a></li>
          <li>Create</li>
        </ul>
      </div>
      <div class="mx-auto flex max-w-lg flex-col gap-4 p-4">
        @c.EnvelopeForm(c.EnvelopeFormProps{})
      </div>
    </div>
  }
}

