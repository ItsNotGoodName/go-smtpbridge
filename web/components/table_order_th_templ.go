// Code generated by templ@v0.2.334 DO NOT EDIT.

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "github.com/ItsNotGoodName/smtpbridge/web/icons"
import "github.com/ItsNotGoodName/smtpbridge/web/routes"
import "github.com/ItsNotGoodName/smtpbridge/web/helpers"
import "net/url"

type TableOrderTHProps struct {
	Query     url.Values
	Ascending bool
	Order     string
	Field     string
}

func tableOrderTHAscending(enable, ascending bool) string {
	if !enable || ascending {
		return ""
	}

	return "1"
}

func TableOrderTH(props TableOrderTHProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<a class=\"w-full flex justify-between items-center\" href=\"")
		if err != nil {
			return err
		}
		var var_2 templ.SafeURL = routes.EnvelopeList().URLQuery(helpers.Query(props.Query, "order", props.Field, "ascending", tableOrderTHAscending(props.Order == props.Field, props.Ascending)))
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_2)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		err = var_1.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if props.Order == props.Field {
			if props.Ascending {
				err = icons.ArrowUpS("h-4 w-4").Render(ctx, templBuffer)
				if err != nil {
					return err
				}
			} else {
				err = icons.ArrowDownS("h-4 w-4").Render(ctx, templBuffer)
				if err != nil {
					return err
				}
			}
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
