// Code generated by templ@v0.2.334 DO NOT EDIT.

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"strconv"

	"github.com/ItsNotGoodName/smtpbridge/internal/models"
	"github.com/ItsNotGoodName/smtpbridge/web/icons"
	"github.com/ItsNotGoodName/smtpbridge/web/routes"
)

type RuleFormCreateProps struct {
	Flash               templ.Component
	Name                string
	NameError           string
	Expression          string
	ExpressionError     error
	Endpoints           []models.Endpoint
	EndpointsSelections []bool
}

func RuleFormCreate(props RuleFormCreateProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(routes.RuleCreate().URLString()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"flex flex-col gap-4\"><div class=\"form-control\"><label class=\"label\"><span class=\"label-text\">")
		if err != nil {
			return err
		}
		var_2 := `Name`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></label>")
		if err != nil {
			return err
		}
		var var_3 = []any{"input input-bordered", templ.KV("input-error", props.NameError != "")}
		err = templ.RenderCSSItems(ctx, templBuffer, var_3...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<input name=\"name\" type=\"text\" placeholder=\"Name\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_3).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		if props.NameError != "" {
			_, err = templBuffer.WriteString("<label class=\"label\"><span class=\"label-text-alt text-error\">")
			if err != nil {
				return err
			}
			var var_4 string = props.NameError
			_, err = templBuffer.WriteString(templ.EscapeString(var_4))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span></label>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div><div class=\"form-control\"><label class=\"label\"><span class=\"label-text\">")
		if err != nil {
			return err
		}
		var_5 := `Expression`
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></label><textarea name=\"expression\" hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(routes.RuleExpressionCheck().URLString()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-trigger=\"keyup changed delay:100ms\" hx-target=\"next label\" class=\"textarea textarea-bordered h-24\" placeholder=\"Expression\">")
		if err != nil {
			return err
		}
		var var_6 string = props.Expression
		_, err = templBuffer.WriteString(templ.EscapeString(var_6))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</textarea><label class=\"label\">")
		if err != nil {
			return err
		}
		err = RuleExpressionCheckLabel(RuleExpressionLabelProps{
			Error: props.ExpressionError,
		}).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label></div><fieldset><legend>")
		if err != nil {
			return err
		}
		var_7 := `Endpoints`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</legend>")
		if err != nil {
			return err
		}
		for i, end := range props.Endpoints {
			_, err = templBuffer.WriteString("<div class=\"form-control\"><label class=\"cursor-pointer label\"><span class=\"label-text\">")
			if err != nil {
				return err
			}
			var var_8 string = end.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_8))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span><input type=\"checkbox\" class=\"toggle\" name=\"endpoints\" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(strconv.FormatInt(end.ID, 10)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
			if props.EndpointsSelections[i] {
				_, err = templBuffer.WriteString(" checked")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("></label></div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</fieldset><button type=\"submit\" class=\"btn btn-primary btn-block\">")
		if err != nil {
			return err
		}
		var_9 := `Create Rule`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button>")
		if err != nil {
			return err
		}
		if props.Flash != nil {
			err = props.Flash.Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</form>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

type RuleFormUpdateProps struct {
	Flash               templ.Component
	Rule                models.Rule
	Name                string
	NameError           string
	Expression          string
	ExpressionError     error
	Endpoints           []models.Endpoint
	EndpointsSelections []bool
}

func RuleFormUpdate(props RuleFormUpdateProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_10 := templ.GetChildren(ctx)
		if var_10 == nil {
			var_10 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(routes.Rule(props.Rule.ID).URLString()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"flex flex-col gap-4\"><div class=\"form-control\"><label class=\"label\"><span class=\"label-text\">")
		if err != nil {
			return err
		}
		var_11 := `Name`
		_, err = templBuffer.WriteString(var_11)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></label><input")
		if err != nil {
			return err
		}
		if props.Rule.Internal {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" name=\"name\" type=\"text\" placeholder=\"Type here\" class=\"input input-bordered\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		if props.NameError != "" {
			_, err = templBuffer.WriteString("<label class=\"label\"><span class=\"label-text-alt text-error\">")
			if err != nil {
				return err
			}
			var var_12 string = props.NameError
			_, err = templBuffer.WriteString(templ.EscapeString(var_12))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span></label>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div><div class=\"form-control\"><label class=\"label\"><span class=\"label-text\">")
		if err != nil {
			return err
		}
		var_13 := `Expression`
		_, err = templBuffer.WriteString(var_13)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></label><textarea")
		if err != nil {
			return err
		}
		if props.Rule.Internal {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" name=\"expression\" hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(routes.RuleExpressionCheck().URLString()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-trigger=\"keyup changed delay:100ms\" hx-target=\"next label\" class=\"textarea textarea-bordered h-24\" placeholder=\"Expression\">")
		if err != nil {
			return err
		}
		var var_14 string = props.Expression
		_, err = templBuffer.WriteString(templ.EscapeString(var_14))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</textarea><label class=\"label\">")
		if err != nil {
			return err
		}
		err = RuleExpressionCheckLabel(RuleExpressionLabelProps{Error: props.ExpressionError}).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label></div><fieldset><legend class=\"label-text\">")
		if err != nil {
			return err
		}
		var_15 := `Endpoints`
		_, err = templBuffer.WriteString(var_15)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</legend>")
		if err != nil {
			return err
		}
		for i, end := range props.Endpoints {
			_, err = templBuffer.WriteString("<div class=\"form-control\"><label class=\"cursor-pointer label\"><span class=\"label-text\">")
			if err != nil {
				return err
			}
			var var_16 string = end.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_16))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span><input")
			if err != nil {
				return err
			}
			if props.Rule.Internal {
				_, err = templBuffer.WriteString(" disabled")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(" type=\"checkbox\" class=\"toggle\" name=\"endpoints\" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(strconv.FormatInt(end.ID, 10)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
			if props.EndpointsSelections[i] {
				_, err = templBuffer.WriteString(" checked")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("></label></div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</fieldset>")
		if err != nil {
			return err
		}
		if props.Rule.Internal {
			_, err = templBuffer.WriteString("<div class=\"alert alert-warning\">")
			if err != nil {
				return err
			}
			err = icons.Alert("h-6 w-6").Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<span>")
			if err != nil {
				return err
			}
			var_17 := `Cannot be edited because it is an internal rule.`
			_, err = templBuffer.WriteString(var_17)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span></div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<button")
		if err != nil {
			return err
		}
		if props.Rule.Internal {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" type=\"submit\" class=\"btn btn-primary btn-block\">")
		if err != nil {
			return err
		}
		var_18 := `Update Rule`
		_, err = templBuffer.WriteString(var_18)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button>")
		if err != nil {
			return err
		}
		if props.Flash != nil {
			err = props.Flash.Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</form>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
