// Code generated by templ@v0.2.334 DO NOT EDIT.

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "github.com/ItsNotGoodName/smtpbridge/web/routes"

type RuleToggleButtonProps struct {
	ID     int64
	Enable bool
}

func RuleToggleButton(props RuleToggleButtonProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if props.Enable {
			_, err = templBuffer.WriteString("<button class=\"btn btn-sm btn-success w-full\" hx-post=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(routes.RuleToggle(props.ID).URLQueryString("enable=false")))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-target=\"this\" hx-swap=\"outerHTML\">")
			if err != nil {
				return err
			}
			var_2 := `Enabled`
			_, err = templBuffer.WriteString(var_2)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<button class=\"btn btn-sm btn-error w-full\" hx-post=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(routes.RuleToggle(props.ID).URLQueryString("enable=true")))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-target=\"this\" hx-swap=\"outerHTML\">")
			if err != nil {
				return err
			}
			var_3 := `Disabled`
			_, err = templBuffer.WriteString(var_3)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
