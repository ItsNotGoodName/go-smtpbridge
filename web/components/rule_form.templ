package components

import (
  "strconv"

  "github.com/ItsNotGoodName/smtpbridge/web/routes"
	"github.com/ItsNotGoodName/smtpbridge/internal/models"
)

type RuleFormCreateProps struct {
  Flash templ.Component
  Name string
  NameError string
  Expression string
  ExpressionError error
  Endpoints []models.Endpoint
  EndpointsSelections []bool
}

templ RuleFormCreate(props RuleFormCreateProps) {
  <form hx-post={ routes.RuleCreate().URLString() } class="flex flex-col gap-4">
    <div class="form-control">
      <label class="label">
        <span class="label-text">Name</span>
      </label>
      <input name="name" type="text" placeholder="Name" class={ "input input-bordered", templ.KV("input-error", props.NameError != "" )} value={ props.Name } />
      if props.NameError != "" {
        <label class="label">
          <span class="label-text-alt text-error">{ props.NameError }</span>
        </label>
      }
    </div>
    <div class="form-control">
      <label class="label">
        <span class="label-text">Expression</span>
      </label>
      <textarea name="expression" hx-post={ routes.RuleExpressionCheck().URLString() } hx-trigger="keyup changed delay:100ms" hx-target="next label" class="textarea textarea-bordered h-24" placeholder="Expression">
        { props.Expression }
      </textarea>
      <label class="label">
        @RuleExpressionCheckLabel(RuleExpressionLabelProps{
            Error: props.ExpressionError,
        })
      </label>
    </div>
    <div class="form-control">
      <label class="label">
        <span class="label-text">Endpoints</span>
      </label>
      <select name="endpoints" class="select select-bordered" multiple>
        for i, end := range props.Endpoints {
          <option value={ strconv.FormatInt(end.ID, 10) } selected?={ props.EndpointsSelections[i] }>{ end.Name }</option>
        }
      </select>
    </div>
    <button type="submit" class="btn btn-primary btn-block">Create Rule</button>
    if props.Flash != nil {
      {! props.Flash }
    }
  </form>
}

type RuleFormUpdateProps struct {
  Flash templ.Component
  Rule models.Rule
  Name string
  NameError string
  Expression string
  ExpressionError error
  Endpoints []models.Endpoint
  EndpointsSelections []bool
}

templ RuleFormUpdate(props RuleFormUpdateProps) {
  <form hx-post={ routes.Rule(props.Rule.ID).URLString() } class="flex flex-col gap-4">
    <div class="form-control">
      <label class="label">
        <span class="label-text">Name</span>
      </label>
      <input disabled?={ props.Rule.Internal } name="name" type="text" placeholder="Type here" class="input input-bordered" value={ props.Name } />
      if props.NameError != "" {
        <label class="label">
          <span class="label-text-alt text-error">{ props.NameError }</span>
        </label>
      }
    </div>
    <div class="form-control">
      <label class="label">
        <span class="label-text">Expression</span>
      </label>
      <textarea disabled?={ props.Rule.Internal } name="expression" hx-post={ routes.RuleExpressionCheck().URLString() } hx-trigger="keyup changed delay:100ms" hx-target="next label" class="textarea textarea-bordered h-24" placeholder="Expression">
        { props.Expression }
      </textarea>
      <label class="label">
        @RuleExpressionCheckLabel(RuleExpressionLabelProps{Error: props.ExpressionError})
      </label>
    </div>
    <div class="form-control">
      <label class="label">
        <span class="label-text">Endpoints</span>
      </label>
      <select disabled?={ props.Rule.Internal } name="endpoints" class="select select-bordered" multiple>
      for i, end := range props.Endpoints {
        <option value={ strconv.FormatInt(end.ID, 10) } selected?={ props.EndpointsSelections[i] }>{ end.Name }</option>
      }
      </select>
    </div>
    <button disabled?={ props.Rule.Internal } type="submit" class="btn btn-primary btn-block">Update Rule</button>
    if props.Flash != nil {
      {! props.Flash }
    }
  </form>
}
