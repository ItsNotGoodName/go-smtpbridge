package components

import (
  "strconv"

  "github.com/ItsNotGoodName/smtpbridge/web/routes"
  "github.com/ItsNotGoodName/smtpbridge/internal/models"
	"github.com/ItsNotGoodName/smtpbridge/web/icons"
)

type RuleFormCreateProps struct {
  Flash templ.Component
  Name string
  NameError string
  Expression string
  ExpressionError error
  Endpoints []models.Endpoint
  EndpointsSelections []bool
}

templ RuleFormCreate(props RuleFormCreateProps) {
  <form hx-post={ routes.RuleCreate().URLString() } class="flex flex-col gap-4" data-loading-states>
    <div class="form-control">
      <label class="label">
        <span class="label-text">Name</span>
      </label>
      <input name="name" type="text" placeholder="Name" class={ "input input-bordered", templ.KV("input-error", props.NameError != "" )} value={ props.Name } />
      if props.NameError != "" {
        <label class="label">
          <span class="label-text-alt text-error">{ props.NameError }</span>
        </label>
      }
    </div>
    <div class="form-control">
      <label class="label">
        <span class="label-text">Expression</span>
      </label>
      <textarea name="expression" hx-post={ routes.RuleExpressionCheck().URLString() } hx-trigger="keyup changed delay:100ms" hx-target="next label" class="textarea textarea-bordered h-24" placeholder="Expression">
        { props.Expression }
      </textarea>
      <label class="label">
        @RuleExpressionCheckLabel(RuleExpressionLabelProps{
            Error: props.ExpressionError,
        })
      </label>
    </div>
    <fieldset>
      <legend>Endpoints</legend>
      for i, end := range props.Endpoints {
        <div class="form-control">
          <label class="label cursor-pointer">
            <span class="label-text">{ end.Name }</span> 
            <input type="checkbox" class="toggle" name="endpoints" value={ strconv.FormatInt(end.ID, 10) } checked?={ props.EndpointsSelections[i] } />
          </label>
        </div>
      }
    </fieldset>
    <button type="submit" class="btn btn-primary btn-block" data-loading-disable>
      <span data-loading-class="loading loading-spinner loading-xs">
        Create Rule
      </span>
    </button>
    if props.Flash != nil {
      {! props.Flash }
    }
  </form>
}

type RuleFormUpdateProps struct {
  Flash templ.Component
  Rule models.Rule
  Name string
  NameError string
  Expression string
  ExpressionError error
  Endpoints []models.Endpoint
  EndpointsSelections []bool
}

templ RuleFormUpdate(props RuleFormUpdateProps) {
  <form hx-post={ routes.Rule(props.Rule.ID).URLString() } class="flex flex-col gap-4" data-loading-states>
    <div class="form-control">
      <label class="label">
        <span class="label-text">Name</span>
      </label>
      <input disabled?={ props.Rule.Internal } name="name" type="text" placeholder="Type here" class="input input-bordered" value={ props.Name } />
      if props.NameError != "" {
        <label class="label">
          <span class="label-text-alt text-error">{ props.NameError }</span>
        </label>
      }
    </div>
    <div class="form-control">
      <label class="label">
        <span class="label-text">Expression</span>
      </label>
      <textarea disabled?={ props.Rule.Internal } name="expression" hx-post={ routes.RuleExpressionCheck().URLString() } hx-trigger="keyup changed delay:100ms" hx-target="next label" class="textarea textarea-bordered h-24" placeholder="Expression">
        { props.Expression }
      </textarea>
      <label class="label">
        @RuleExpressionCheckLabel(RuleExpressionLabelProps{Error: props.ExpressionError})
      </label>
    </div>
    <fieldset>
      <legend class="label-text">Endpoints</legend>
      for i, end := range props.Endpoints {
        <div class="form-control">
          <label class="label cursor-pointer">
            <span class="label-text">{ end.Name }</span> 
            <input disabled?={ props.Rule.Internal } type="checkbox" class="toggle" name="endpoints" value={ strconv.FormatInt(end.ID, 10) } checked?={ props.EndpointsSelections[i] } />
          </label>
        </div>
      }
    </fieldset>
    if props.Rule.Internal {
      <div class="alert alert-warning">
        @icons.Alert("h-6 w-6")
        <span>Rule cannot be edited because it is internal.</span>
      </div>
    }
    <button disabled?={ props.Rule.Internal } type="submit" class="btn btn-primary btn-block" data-loading-disable>
      <span data-loading-class="loading loading-spinner loading-xs">
        Update Rule
      </span>
    </button>
    if props.Flash != nil {
      {! props.Flash }
    }
  </form>
}
