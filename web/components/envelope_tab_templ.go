// Code generated by templ@v0.2.334 DO NOT EDIT.

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"strconv"

	"github.com/ItsNotGoodName/smtpbridge/internal/models"
	"github.com/ItsNotGoodName/smtpbridge/web/routes"
)

type EnvelopeTabProps struct {
	Envelope models.Envelope
	Tab      routes.EnvelopeTab
}

func EnvelopeTab(props EnvelopeTabProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"tabs\"><div class=\"flex\"><div class=\"border-base-200 w-4 border-b\"></div><div class=\"tabs\" role=\"tablist\">")
		if err != nil {
			return err
		}
		var var_2 = []any{"tab tab-lifted", templ.KV("tab-active", props.Tab == routes.EnvelopeTabText)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_2...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_2).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(routes.EnvelopeTabComponent(props.Envelope.Message.ID, routes.EnvelopeTabText).URLString()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" aria-controls=\"tab-content\" role=\"tab\" hx-target=\"#tabs\" hx-swap=\"innerHTML\">")
		if err != nil {
			return err
		}
		var_3 := `Text`
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a>")
		if err != nil {
			return err
		}
		if props.Envelope.Message.HTML != "" {
			var var_4 = []any{"tab tab-lifted", templ.KV("tab-active", props.Tab == routes.EnvelopeTabHTML)}
			err = templ.RenderCSSItems(ctx, templBuffer, var_4...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<a class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_4).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-get=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(routes.EnvelopeTabComponent(props.Envelope.Message.ID, routes.EnvelopeTabHTML).URLString()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" aria-controls=\"tab-content\" role=\"tab\" hx-target=\"#tabs\" hx-swap=\"innerHTML\">")
			if err != nil {
				return err
			}
			var_5 := `HTML`
			_, err = templBuffer.WriteString(var_5)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a>")
			if err != nil {
				return err
			}
		}
		if len(props.Envelope.Attachments) != 0 {
			var var_6 = []any{"tab tab-lifted flex gap-2", templ.KV("tab-active", props.Tab == routes.EnvelopeTabAttachments)}
			err = templ.RenderCSSItems(ctx, templBuffer, var_6...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<a class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_6).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-get=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(routes.EnvelopeTabComponent(props.Envelope.Message.ID, routes.EnvelopeTabAttachments).URLString()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" aria-controls=\"tab-content\" role=\"tab\" hx-target=\"#tabs\" hx-swap=\"innerHTML\">")
			if err != nil {
				return err
			}
			var_7 := `Attachments`
			_, err = templBuffer.WriteString(var_7)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" <div class=\"badge badge-primary\"><td>")
			if err != nil {
				return err
			}
			var var_8 string = strconv.Itoa(len(props.Envelope.Attachments))
			_, err = templBuffer.WriteString(templ.EscapeString(var_8))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td></div></a>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div><div class=\"border-base-200 flex-1 border-b\"></div></div><div class=\"p-4\" id=\"tab-content\" role=\"tabpanel\">")
		if err != nil {
			return err
		}
		switch props.Tab {
		case routes.EnvelopeTabText:
			_, err = templBuffer.WriteString("<pre class=\"overflow-x-auto\">")
			if err != nil {
				return err
			}
			var var_9 string = props.Envelope.Message.Text
			_, err = templBuffer.WriteString(templ.EscapeString(var_9))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</pre>")
			if err != nil {
				return err
			}
		case routes.EnvelopeTabHTML:
			_, err = templBuffer.WriteString("<iframe src=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(routes.EnvelopeHTML(props.Envelope.Message.ID).URLString()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" sandbox=\"\" class=\"h-screen w-full rounded border-base-200 border\"></iframe>")
			if err != nil {
				return err
			}
		case routes.EnvelopeTabAttachments:
			_, err = templBuffer.WriteString("<div class=\"flex flex-wrap gap-4\">")
			if err != nil {
				return err
			}
			for _, att := range props.Envelope.Attachments {
				err = AttachmentCard(AttachmentCardProps{Attachment: att}).Render(ctx, templBuffer)
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
