// Code generated by templ@v0.2.334 DO NOT EDIT.

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"github.com/ItsNotGoodName/smtpbridge/web/icons"
	"github.com/ItsNotGoodName/smtpbridge/web/meta"
	"github.com/ItsNotGoodName/smtpbridge/web/routes"
)

func LayoutDefault(m meta.Meta) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"drawer lg:drawer-open\"><input id=\"my-drawer-2\" type=\"checkbox\" class=\"drawer-toggle\"><div class=\"drawer-content\"><div class=\"max-w-[100vw]\">")
		if err != nil {
			return err
		}
		err = Header(m).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"min-h-screen\">")
		if err != nil {
			return err
		}
		err = var_1.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		err = Footer().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div><div class=\"drawer-side z-20\"><label for=\"my-drawer-2\" class=\"drawer-overlay\"></label><ul class=\"menu bg-base-200 text-base-content h-full w-60 p-4\"><li>")
		if err != nil {
			return err
		}
		var var_2 = []any{templ.KV("active", m.Route.ChildOf(routes.Index()))}
		err = templ.RenderCSSItems(ctx, templBuffer, var_2...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_2).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" href=\"")
		if err != nil {
			return err
		}
		var var_3 templ.SafeURL = routes.Index().URL()
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_3)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		err = icons.Home("h-4 w-4").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_4 := `Home`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></li><li>")
		if err != nil {
			return err
		}
		var var_5 = []any{templ.KV("active", m.Route.ChildOf(routes.EnvelopeList()))}
		err = templ.RenderCSSItems(ctx, templBuffer, var_5...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_5).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" href=\"")
		if err != nil {
			return err
		}
		var var_6 templ.SafeURL = routes.EnvelopeList().URL()
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_6)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		err = icons.Mail("h-4 w-4").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_7 := `Envelopes`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></li><li>")
		if err != nil {
			return err
		}
		var var_8 = []any{templ.KV("active", m.Route.ChildOf(routes.AttachmentList()))}
		err = templ.RenderCSSItems(ctx, templBuffer, var_8...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_8).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" href=\"")
		if err != nil {
			return err
		}
		var var_9 templ.SafeURL = routes.AttachmentList().URL()
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_9)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		err = icons.Attachment("h-4 w-4").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_10 := `Attachments`
		_, err = templBuffer.WriteString(var_10)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></li><li>")
		if err != nil {
			return err
		}
		var var_11 = []any{templ.KV("active", m.Route.ChildOf(routes.EndpointList()))}
		err = templ.RenderCSSItems(ctx, templBuffer, var_11...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_11).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" href=\"")
		if err != nil {
			return err
		}
		var var_12 templ.SafeURL = routes.EndpointList().URL()
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_12)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		err = icons.SendPlane("h-4 w-4").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_13 := `Endpoints`
		_, err = templBuffer.WriteString(var_13)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></li><li>")
		if err != nil {
			return err
		}
		var var_14 = []any{templ.KV("active", m.Route.ChildOf(routes.RuleList()))}
		err = templ.RenderCSSItems(ctx, templBuffer, var_14...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_14).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" href=\"")
		if err != nil {
			return err
		}
		var var_15 templ.SafeURL = routes.RuleList().URL()
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_15)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		err = icons.Ruler("h-4 w-4").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_16 := `Rules`
		_, err = templBuffer.WriteString(var_16)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></li><li>")
		if err != nil {
			return err
		}
		var var_17 = []any{templ.KV("active", m.Route.ChildOf(routes.TraceList()))}
		err = templ.RenderCSSItems(ctx, templBuffer, var_17...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_17).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" href=\"")
		if err != nil {
			return err
		}
		var var_18 templ.SafeURL = routes.TraceList().URL()
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_18)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		err = icons.Sketching("h-4 w-4").Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_19 := `Traces`
		_, err = templBuffer.WriteString(var_19)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></li></ul></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
