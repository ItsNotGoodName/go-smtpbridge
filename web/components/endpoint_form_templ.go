// Code generated by templ@v0.2.334 DO NOT EDIT.

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"strconv"

	"github.com/ItsNotGoodName/smtpbridge/internal/models"
	"github.com/ItsNotGoodName/smtpbridge/web/helpers"
	"github.com/ItsNotGoodName/smtpbridge/web/icons"
	"github.com/ItsNotGoodName/smtpbridge/web/routes"
)

type EndpointFormProps struct {
	Flash  templ.Component
	Create bool
	Data   EndpointFormData
}

type EndpointFormData struct {
	ID                      int64
	Internal                bool
	Name                    string
	NameError               string
	AttachmentDisable       bool
	TextDisable             bool
	TitleTemplate           string
	TitleTemplateError      string
	BodyTemplate            string
	BodyTemplateError       string
	Kind                    string
	KindError               string
	EndpointFormConfigProps EndpointFormConfigProps
}

func EndpointForm(props EndpointFormProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Route().URLString()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"flex flex-col gap-4\" data-loading-states>")
		if err != nil {
			return err
		}
		if props.Data.Internal {
			_, err = templBuffer.WriteString("<div class=\"alert alert-warning\">")
			if err != nil {
				return err
			}
			err = icons.Alert("h-6 w-6").Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<span>")
			if err != nil {
				return err
			}
			var_2 := `Endpoint cannot be edited because it is internal.`
			_, err = templBuffer.WriteString(var_2)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span></div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<div class=\"form-control\"><label class=\"label\"><span class=\"label-text\">")
		if err != nil {
			return err
		}
		var_3 := `Name`
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></label><input")
		if err != nil {
			return err
		}
		if props.Data.Internal {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" name=\"Name\" type=\"text\" placeholder=\"Name\" class=\"input input-bordered\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(props.Data.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		if props.Data.NameError != "" {
			_, err = templBuffer.WriteString("<label class=\"label\"><span class=\"label-text-alt text-error\">")
			if err != nil {
				return err
			}
			var var_4 string = props.Data.NameError
			_, err = templBuffer.WriteString(templ.EscapeString(var_4))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span></label>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div><div class=\"flex items-center justify-between\"><div>")
		if err != nil {
			return err
		}
		var_5 := `Text Disable`
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div><input")
		if err != nil {
			return err
		}
		if props.Data.Internal {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" name=\"TextDisable\" type=\"checkbox\" class=\"toggle\"")
		if err != nil {
			return err
		}
		if props.Data.TextDisable {
			_, err = templBuffer.WriteString(" checked")
			if err != nil {
				return err
			}
		}
		if props.Data.Internal {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("></div></div><div class=\"flex items-center justify-between\"><div>")
		if err != nil {
			return err
		}
		var_6 := `Attachment Disable`
		_, err = templBuffer.WriteString(var_6)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div><input")
		if err != nil {
			return err
		}
		if props.Data.Internal {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" name=\"AttachmentDisable\" type=\"checkbox\" class=\"toggle\"")
		if err != nil {
			return err
		}
		if props.Data.AttachmentDisable {
			_, err = templBuffer.WriteString(" checked")
			if err != nil {
				return err
			}
		}
		if props.Data.Internal {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("></div></div><div class=\"form-control\"><label class=\"label\"><span class=\"label-text\">")
		if err != nil {
			return err
		}
		var_7 := `Title Template`
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></label><textarea")
		if err != nil {
			return err
		}
		if props.Data.Internal {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" name=\"TitleTemplate\" placeholder=\"Title Template\" class=\"textarea textarea-bordered h-24\">")
		if err != nil {
			return err
		}
		var var_8 string = props.Data.TitleTemplate
		_, err = templBuffer.WriteString(templ.EscapeString(var_8))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</textarea>")
		if err != nil {
			return err
		}
		if props.Data.TitleTemplateError != "" {
			_, err = templBuffer.WriteString("<label class=\"label\"><span class=\"label-text-alt text-error\">")
			if err != nil {
				return err
			}
			var var_9 string = props.Data.TitleTemplateError
			_, err = templBuffer.WriteString(templ.EscapeString(var_9))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span></label>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div><div class=\"form-control\"><label class=\"label\"><span class=\"label-text\">")
		if err != nil {
			return err
		}
		var_10 := `Body Template`
		_, err = templBuffer.WriteString(var_10)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span></label><textarea")
		if err != nil {
			return err
		}
		if props.Data.Internal {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" name=\"BodyTemplate\" placeholder=\"Body Template\" class=\"textarea textarea-bordered h-24\">")
		if err != nil {
			return err
		}
		var var_11 string = props.Data.BodyTemplate
		_, err = templBuffer.WriteString(templ.EscapeString(var_11))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</textarea>")
		if err != nil {
			return err
		}
		if props.Data.BodyTemplateError != "" {
			_, err = templBuffer.WriteString("<label class=\"label\"><span class=\"label-text-alt text-error\">")
			if err != nil {
				return err
			}
			var var_12 string = props.Data.BodyTemplateError
			_, err = templBuffer.WriteString(templ.EscapeString(var_12))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span></label>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div><div class=\"form-control\" data-loading-states><label class=\"label\"><span class=\"label-text\">")
		if err != nil {
			return err
		}
		var_13 := `Kind`
		_, err = templBuffer.WriteString(var_13)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span><span class=\"label-text-alt\"><span data-loading-class=\"loading loading-spinner loading-xs\" data-loading-path=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(routes.EndpointFormConfigComponent().URLString()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></span></span></label><select")
		if err != nil {
			return err
		}
		if props.Data.Internal {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" name=\"Kind\" class=\"select select-bordered\" hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(routes.EndpointFormConfigComponent().URLString()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"#endpoint-config\"><option disabled")
		if err != nil {
			return err
		}
		if props.Data.Kind == "" {
			_, err = templBuffer.WriteString(" selected")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		var_14 := `Select Kind`
		_, err = templBuffer.WriteString(var_14)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option>")
		if err != nil {
			return err
		}
		for _, s := range helpers.EndpointSchema() {
			_, err = templBuffer.WriteString("<option value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(s.Kind))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
			if props.Data.Kind == s.Kind {
				_, err = templBuffer.WriteString(" selected")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			var var_15 string = s.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_15))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</select>")
		if err != nil {
			return err
		}
		if props.Data.KindError != "" {
			_, err = templBuffer.WriteString("<label class=\"label\"><span class=\"label-text-alt text-error\">")
			if err != nil {
				return err
			}
			var var_16 string = props.Data.KindError
			_, err = templBuffer.WriteString(templ.EscapeString(var_16))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span></label>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		err = EndpointFormConfig(props.Data.EndpointFormConfigProps).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<button")
		if err != nil {
			return err
		}
		if props.Data.Internal {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" type=\"submit\" class=\"btn btn-primary btn-block\" data-loading-disable><span data-loading-class=\"loading loading-spinner loading-xs\">")
		if err != nil {
			return err
		}
		if props.Create {
			var_17 := `Create Endpoint`
			_, err = templBuffer.WriteString(var_17)
			if err != nil {
				return err
			}
		} else {
			var_18 := `Update Endpoint`
			_, err = templBuffer.WriteString(var_18)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</span></button>")
		if err != nil {
			return err
		}
		if props.Flash != nil {
			err = props.Flash.Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</form>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

type EndpointFormConfigProps struct {
	Internal bool
	Fields   []EndpointFormConfigField
	Error    string
}

type EndpointFormConfigField struct {
	models.EndpointSchemaField
	Value string
}

func EndpointFormConfig(props EndpointFormConfigProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_19 := templ.GetChildren(ctx)
		if var_19 == nil {
			var_19 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<fieldset id=\"endpoint-config\">")
		if err != nil {
			return err
		}
		if len(props.Fields) > 0 {
			_, err = templBuffer.WriteString("<legend>")
			if err != nil {
				return err
			}
			var_20 := `Config`
			_, err = templBuffer.WriteString(var_20)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</legend> ")
			if err != nil {
				return err
			}
			if props.Error != "" {
				_, err = templBuffer.WriteString("<p class=\"text-error\">")
				if err != nil {
					return err
				}
				var var_21 string = props.Error
				_, err = templBuffer.WriteString(templ.EscapeString(var_21))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</p>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			for i, f := range props.Fields {
				_, err = templBuffer.WriteString("<div class=\"form-control\"><label class=\"label\"><span class=\"label-text\">")
				if err != nil {
					return err
				}
				var var_22 string = f.Name
				_, err = templBuffer.WriteString(templ.EscapeString(var_22))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</span></label><input type=\"hidden\" name=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString("Config." + strconv.Itoa(i) + ".Key"))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(f.Key))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				if f.Multiline {
					_, err = templBuffer.WriteString("<textarea")
					if err != nil {
						return err
					}
					if props.Internal {
						_, err = templBuffer.WriteString(" disabled")
						if err != nil {
							return err
						}
					}
					_, err = templBuffer.WriteString(" name=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString("Config." + strconv.Itoa(i) + ".Value"))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\" placeholder=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(f.Example))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\" class=\"textarea textarea-bordered h-24\">")
					if err != nil {
						return err
					}
					var var_23 string = f.Value
					_, err = templBuffer.WriteString(templ.EscapeString(var_23))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</textarea>")
					if err != nil {
						return err
					}
				} else {
					_, err = templBuffer.WriteString("<input")
					if err != nil {
						return err
					}
					if props.Internal {
						_, err = templBuffer.WriteString(" disabled")
						if err != nil {
							return err
						}
					}
					_, err = templBuffer.WriteString(" name=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString("Config." + strconv.Itoa(i) + ".Value"))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\" placeholder=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(f.Example))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\" type=\"text\" class=\"input input-bordered\" value=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(f.Value))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\">")
					if err != nil {
						return err
					}
				}
				if f.Description != "" {
					_, err = templBuffer.WriteString("<label class=\"label\"><span class=\"label-text-alt\">")
					if err != nil {
						return err
					}
					var var_24 string = f.Description
					_, err = templBuffer.WriteString(templ.EscapeString(var_24))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</span></label>")
					if err != nil {
						return err
					}
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			}
		}
		_, err = templBuffer.WriteString("</fieldset>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
