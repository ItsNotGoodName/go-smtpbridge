// Code generated by templ@v0.2.334 DO NOT EDIT.

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"strconv"

	"github.com/ItsNotGoodName/smtpbridge/internal/models"
	"github.com/ItsNotGoodName/smtpbridge/web/helpers"
	"github.com/ItsNotGoodName/smtpbridge/web/icons"
	"github.com/ItsNotGoodName/smtpbridge/web/meta"
	"github.com/ItsNotGoodName/smtpbridge/web/routes"
)

type RecentEnvelopeListProps struct {
	Envelopes []models.Envelope
}

func RecentEnvelopeList(m meta.Meta, props RecentEnvelopeListProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"card card-compact border-base-200 border\"><div class=\"card-body\"><h2 class=\"card-title\">")
		if err != nil {
			return err
		}
		var_2 := `Recent Envelopes`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2><div>")
		if err != nil {
			return err
		}
		for _, env := range props.Envelopes {
			_, err = templBuffer.WriteString("<a href=\"")
			if err != nil {
				return err
			}
			var var_3 templ.SafeURL = routes.Envelope(env.Message.ID).URL()
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_3)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"hover:bg-base-200 border-base-200 flex flex-col gap-2 border-b p-2 first:border-t sm:flex-row\"><div class=\"w-40 font-bold\">")
			if err != nil {
				return err
			}
			var var_4 string = helpers.TimeHumanize(env.Message.CreatedAt.Time())
			_, err = templBuffer.WriteString(templ.EscapeString(var_4))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div><div class=\"flex flex-1 items-center justify-between gap-2 truncate\"><div class=\"truncate\">")
			if err != nil {
				return err
			}
			var var_5 string = env.Message.Subject
			_, err = templBuffer.WriteString(templ.EscapeString(var_5))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
			if len(env.Attachments) != 0 {
				_, err = templBuffer.WriteString("<div class=\"tooltip tooltip-left flex items-center fill-current\" data-tip=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(strconv.Itoa(len(env.Attachments)) + " Attachment(s)"))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				err = icons.Attachment("h-4 w-4").Render(ctx, templBuffer)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div></a>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
